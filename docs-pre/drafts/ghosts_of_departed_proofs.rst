#########################
Ghosts of Departed Proofs
#########################

http://kataskeue.com/gdp.pdf

``head`` みたいな全ての入力に対して出力があるとは限らない関数を定義したいときに
どうしますか？ 普通は部分関数にするか ``Maybe`` なんなりの失敗を表現できる
何かを使って定義しますよね。でも、部分関数は苛立たしい実行時エラーを引き
起こします。Maybe など安全な方法を取っても、「なんでこれ失敗するの！？」と
いうような時があります。原因を調べるためには、ドキュメントやソースコードを
調べる必要があり無駄な苦労をすることがあります。

この問題を解決するために、この論文では "Ghosts of Departed Proofs" 、
つまり、詩的に言うと「今は亡き証明たちの幽霊」というテクニックを紹介している。
型はAPIだ！型でプログラムの不変量（性質のかっこいい言い方）をエンコードしたい！
そんな要望に応えて、依存型 (dependent type) 、洗練型 (refinement type) 、
線形型 (linear type) など、非常に表現力がある型の変わり種が登場した。
でも、こんな強力な型システムがわらわらと出てくるのに関わらず、
（理論上ではなく）現実上で Haskell を使っているプログラマーは、
Damas-Hindley-Milner 型システムへのよく理解されている拡張を使って、
「あらよっ」と驚くほど洗練された不変量を型にエンコードしてしまった。
