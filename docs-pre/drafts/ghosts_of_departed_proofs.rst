#########################
Ghosts of Departed Proofs
#########################

http://kataskeue.com/gdp.pdf

head みたいな全ての入力に対して出力があるとは限らない関数を定義したいとき、
あなたは、あの人は、そこの人は、普通の Haskeller は、どうするか？
普通は、head みたいに部分関数にする（決してしてはならない）か、
Maybe なんなりの失敗を表現するなにかを使って定義する。
でも、部分関数は苛立たしい実行時エラーを引き起こす。
Maybe を使っても、依然、なぜか Nothing しか返されないなど失敗するときに、
失敗する条件がドキュメントやソースコードを見ないと分からず苦労してしまう。

この問題を解決するために、この論文では "Ghosts of Departed Proofs" 、
つまり、詩的に言うと「今は亡き証明たちの幽霊」というテクニックを紹介している。
型はAPIだ！型でプログラムの不変量（性質のかっこいい言い方）をエンコードしたい！
そんな要望に応えて、依存型 (dependent type) 、洗練型 (refinement type) 、
線形型 (linear type) など、非常に表現力がある型の変わり種が登場した。
でも、こんな強力な型システムがわらわらと出てくるのに関わらず、
（理論上ではなく）現実上で Haskell を使っているプログラマーは、
Damas-Hindley-Milner 型システムへのよく理解されている拡張を使って、
「あらよっ」と驚くほど洗練された不変量を型にエンコードしてしまった。
