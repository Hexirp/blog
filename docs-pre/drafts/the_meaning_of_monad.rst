############
モナドの意味
############

**ふわっとした話です。**

モナドは難しいとかいいます。

色々なものに例えられて、色々なところで解説されていますが、それを横目に見ていた
私の所感は「モナドはモナドとして受け入れるしかない」というところです。

しかし、モナドは何で分かりづらいのでしょうか。
なぜ、モナドは私がそうであったように人々を惹きつけるのでしょうか。

モナドという言葉がいけない。

「モナド」はかっこよくて、まったく意味が分からない言葉です。
もし、意味が分かったらモナドを理解しやすくなるのでしょうか？

********
日本語訳
********

関数型プログラミングの「モナド」という概念は、圏論の「モナド」に因むものです。
圏論の「モナド」という言葉は、哲学の「モナド」から名付けられました。

ウィキペディアで見てみると\ `モナド`_\ は曖昧さ回避になっていますが、
ここは大本である\ `モナド (哲学)`_ を見てみましょう。

 モナドは、ライプニッツが案出した空間を説明するための概念である。
 ギリシア語 μονάς monas モナス（個、単一）、
 μόνος monos モノス (単一の) に由来する。
 **単子**\ と翻訳される場合もある。

 -- 記事より

「モナド」を日本語で訳すると「単子」ということですね。単一のもの、と言えます。

**************
意味するところ
**************

哲学的な説明がその後に続きますが、関数型プログラミングのモナドは圏論のものです。
そのため、圏論のモナドが、なぜ哲学のモナドという言葉を借用したのか考えます。

圏論のモナドは、関手とそれに関する二つの自然変換の三つ組です。
この記事は気持ちの記事なので、Haskell で書き表します。このようになります。

.. code-block:: haskell

 class Functor m => Monad m where
  pure :: a -> m a
  join :: m (m a) -> m a

これに加えてモナド則という条件がありますが、紹介しません。

ひとつ
======

どちらの関数も返り値の型は ``m a`` となっています。
``m`` が ``a`` に一回だけ適用されています。

``join`` が取る値の型は ``m (m a)`` です。\ ``m`` が二回適用されています。
``pure`` が取る値の型は ``a`` です。これは ``m`` のゼロ回適用だと考えられます。

``m (m (m a)) -> m a`` という型を持つ関数は作れるでしょうか？
``join . join`` とすれば簡単に作れます。
``m a -> m a`` という型を持つ関数は ``id`` で簡単に定義できます。
``fmap id`` でもいいでしょうが、どちらも同じことです。そうでなければならない。

.. code-block:: haskell

 pure               ::            a    -> m a
 id                 ::          m a    -> m a
 join               ::       m (m a)   -> m a
 join . join        ::    m (m (m a))  -> m a
 join . join . join :: m (m (m (m a))) -> m a
 :
 :
 :

``m`` が何回適用されていても、\ ``m`` が一回だけ適用された形に変換できる。

０重でも、１重でも、２重でも、３重でも、１重へ変換できる。
とにかく一つになりたがるものということが出来るでしょう。

「単子」は単一のもの、といった意味を持ちます。単一になりたがるもの。
こう考えれば、モナドの日本語訳が単子であることも納得できる気がしませんか？

``Repeat n m a`` という仮想的な型でこれらを一般化できます。
``m`` を ``a`` に ``n`` 回適用することを表します。

この二つの関数は似たような型を持っていますが、
これは圏論においては二つの関数とも自然変換に対応するからです。

本当のところは
==============

圏論の今は「モナド」と呼ばれる概念に、「モナド」という言葉が割り当てられたのは、
圏論の上でモナドが果たす役割に絡んだもっと深い理由があるらしいです。
