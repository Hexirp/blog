###################
Notation 入門 (Coq)
###################

Coq の入門として、Notation コマンドについて解説します。また、Notation
コマンドと強く関係している Scope という仕組みにも少し触れます。

****************
何のためにあるか
****************

Coq の記法は、ソースコードを人の感覚に近づけて、より書きやすくするためにある
ものです（Coq に限らず大体の言語がそうですが）。Coq のソースコードを直接書くと
長いし複雑になってしまうため（Coq IDE の View タブにある Display Notations と
いうフラグをオフにしてみると体感できます）、暗黙引数や型クラスやモジュールや
タクティックなどの対策が取られているのですが、その一つが記法を追加できる仕組み
です。

****************
どうやって使うか
****************

.. code-block:: coq

 Notation "a + b" := (add a b) .

もっとも単純な書き方はこのようになります。

この場合は ``a + b`` という記法が ``add a b`` という関数と結びつけられることを
定義しています。「～を表すと定義しています」のではなく「～と結び付けられる
ことを定義しています」と表現したわけは、ソースコードとして書く時に使えるだけ
ではなく他のコマンドで式が表示されるときも ``add a b`` が ``a + b`` と
表示されるようになるためです。

.. code-block:: coq

 Notation "..." := (...) (...) : ... .

一般的にはこう書けます。

at level
========

演算子の優先順位を定めます。Haskell と違い、大きいほど優先されなくなります。
``a + b * c`` と書いたとき ``+`` のレベルが ``*`` より大きければ
``a + (b * c)`` と書かれます。

associativity
=============

``right``, ``left``, ``no`` の三種類あります。同じレベルの記法で、別々の
結合性を持つものを定義できないようです。

.. code-block:: coq

 Notation "a + b" := (add a b) (left associativity) .

parsing only
============

さっきも書いたように表示されるときも定義した記法が適用されますが、
そうさせたくない場合もあります。別名など。

.. code-block:: coq

 Notation "plus" := add (parsing only) .

文字を使う
==========

.. code-block:: coq

 Notation "f 'o' g" := (compose f g) .

上の ``o`` のように文字を記法に使うにはアポストロフィーで囲まないといけません。
また、記法に使うと指定した文字列は、記法専用となり、定理や引数の名前として
使えないようです。

別名を定義するときは不要です。

Scope
=====

場所によって記法の意味が変えられます。オーバーライドや型クラスによって
実現される動作ですね。

Reserved
========

上の Scope に関連して……。

ところどころで ``+`` が左結合になったり右結合になったり優先順位が強くなったり
弱くなったりすると読みづらくなるので、そういうのを先に指定できる仕組みが
あります。

.. code-block:: coq

 Reserved Notation "a + b" (at level 40) .

事前に定義された記法の中身を定義するときは左結合かどうかを指定する必要が
ありません。

.. ..
=====

複数重ねて一般化した繰り返しの記法も書けます。最たる例は標準ライブラリの
``exists x y .. z, P`` でしょう。

****
応用
****

記法は豊かな構文を実現します。ほとんどマクロです。

.. code-block: coq

 begin

  a + b + c

  =( ltac:omega )

  a + (b + c)

 end

Coq では自由に改行やスペースを入れても良いのがいいのでしょう。
