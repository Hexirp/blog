Homotopy Type Theory には precategory という概念があります。この用語の使い方は一般的な数学での使い方と異なる<ref>とある人の言葉を借りれば「ラディカル」である。</ref>ので、しばしば混乱してしまいます。自分用も兼ねて、まとめておきます。

この記事は [https://adventar.org/calendars/5002 Mathematical Logic Advent Calendar 2020] の 5 日目の記事です。

== precategory の定義 ==

Homotopy Type Theory: Univalent Foundations of Mathematics の 307 ページ目には次のように書かれています。

<blockquote><p>Ignoring size issues, in set-based mathematics a category consists of a ''set'' \( A _ 0 \) of objects and, for each \( x, y \in A _ 0 \), a ''set'' \( \mathrm{hom} _ A ( x, y ) \) of morphisms. Under univalent foundations, a “naive” definition of category would simply mimic this with a ''type'' of objects and ''types'' of morphisms. If we allowed these types to contain arbitary higher homotopy, then wee ought to impose higher coherence conditions, leading to some notion of \( ( \infty, 1 ) \)-category, but at preset our goal is more modest. We consider only 1-categories, and therefore we restrict the types \( \mathrm{hom} _ A ( x, y ) \) to be sets, i.e. \( 0 \)-types. If we impose no futher conditions, we will call this notion a ''precategory''.</p></blockquote>

これで終わり……という訳にはいきませんよね。 precategory が何であるかというと、対象の型 \( A \) があり、 \( x, y : A \) に対する射の型 \( \mathrm{hom} _ A ( x, y ) \) があり、恒等射があり、射の合成があり、それらが圏としての通常の法則を満たし、 \( A \) が \( 0 \)-truncated である構造です。

== strict category の定義 ==

precategory において、 \( A \) が \( 0 \)-truncated であるとき、 strict category と呼びます。 Homotopy Type Theory では集合が \( 0 \)-truncated である型になぞらえられますが、その考え方に従って通常の圏の定義を翻訳したものであるため strict と呼ばれるのだと思います。

== category の定義 ==

precategory において、 \( x \) と \( y \) が isomorphism であるという型を \( \mathsf{iso} ( x, y ) \) と書き、自明に得ることが出来る \( x = _ { A _ 0 } y \to \mathsf{iso} ( x, y ) \) という関数が equivalence になる時に、 category と呼びます。

The n-Category Cafe の Category Theory in Homotopy Type Theory という記事では、同じ概念が saturated category または univalent category と呼ばれており、 precategory という名前は strict category と saturated category の元になるという意味の名前であることが書かれています。

== 性質 ==

precategory と strict category と category の性質を纏めてみます。

{|
!
! precategory
! strict category
! category
|-
! \( 0 \)-射は \( n \)-truncated であるか？
| \( \infty \)
| \( 0 \)
| \( 1 \)<ref>Homotopy Type Theory: Univalent Foundations of Mathematics の Lemma 9.1.8 より。</ref>
|-
! \( 1 \)-射は \( n \)-truncated であるか？
| \( 0 \)
| \( 0 \)
| \( 0 \)
|-
! \( 2 \)-射は \( n \)-truncated であるか？
| \( -1 \)
| \( -1 \)
| \( -1 \)
|-
! \( 3 \)-射は \( n \)-truncated であるか？
| \( -2 \)
| \( -2 \)
| \( -2 \)
|}

{|
!
! precategory
! strict category
! category
|-
! \( 1 \)-射は可逆であるか？
| No
| No
| No
|-
! \( 2 \)-射は可逆であるか？
| Yes
| Yes
| Yes
|-
! \( 3 \)-射は可逆であるか？
| Yes
| Yes
| Yes
|}

{|
!
! precategory
! strict category
! category
|-
! \( 1 \)-射は自明であるか？
| No
| No
| No
|-
! \( 2 \)-射は自明であるか？
| Yes
| Yes
| Yes
|-
! \( 3 \)-射は自明であるか？
| Yes
| Yes
| Yes
|}

== 具体的な例 ==

例えば、自然数の型 \( \mathrm{Nat} \) と、その上の等しさ \( \_ = _ \mathrm{Nat} \_ \) を考えてみましょう。この時、次の事実が成り立ちます。

# \( \mathrm{Nat} \) は \( 0 \)-truncated である。
# 任意の \( x, y : \mathrm{Nat} \) に対して \( x = _ \mathrm{Nat} y \) は \( ( - 1 ) \)-truncated である。

これは、任意の \( p, q : x = _ \mathrm{Nat} y \) に対して \( p = _ { x = _ \mathrm{Nat} y } q \) であることを導きます。そのため、射の合成に関する条件は自明に成り立ちます。

よって、 \( ( \mathrm{Nat}, \_ = _ \mathrm{Nat} \_ ) \) は precategory と strict category です。さらに、 \( \mathsf{iso} ( x, y ) \to x = _ \mathrm{Nat} y \) であることが容易に分かり、両方の型が \( ( -1 ) \)-truncated となることから、これは equivalence となり、件の圏は saturated category でもあります。

{|
!
! precategory
! strict category
! category
! \( ( \mathrm{Nat}, \_ = _ \mathrm{Nat} \_ ) \)
|-
! \( 0 \)-射は \( n \)-truncated であるか？
| \( \infty \)
| \( 0 \)
| \( 1 \)
| \( 0 \)
|-
! \( 1 \)-射は \( n \)-truncated であるか？
| \( 0 \)
| \( 0 \)
| \( 0 \)
| \( -1 \)
|-
! \( 2 \)-射は \( n \)-truncated であるか？
| \( -1 \)
| \( -1 \)
| \( -1 \)
| \( -2 \)
|-
! \( 3 \)-射は \( n \)-truncated であるか？
| \( -2 \)
| \( -2 \)
| \( -2 \)
| \( -2 \)
|}

{|
!
! precategory
! strict category
! category
! \( ( \mathrm{Nat}, \_ = _ \mathrm{Nat} \_ ) \)
|-
! \( 1 \)-射は可逆であるか？
| No
| No
| No
| Yes
|-
! \( 2 \)-射は可逆であるか？
| Yes
| Yes
| Yes
| Yes
|-
! \( 3 \)-射は可逆であるか？
| Yes
| Yes
| Yes
| Yes
|}

{|
!
! precategory
! strict category
! category
! \( ( \mathrm{Nat}, \_ = _ \mathrm{Nat} \_ ) \)
|-
! \( 1 \)-射は自明であるか？
| No
| No
| No
| Yes
|-
! \( 2 \)-射は自明であるか？
| Yes
| Yes
| Yes
| Yes
|-
! \( 3 \)-射は自明であるか？
| Yes
| Yes
| Yes
| Yes
|}

このことから、 \( \mathrm{Hom} ( x, y ) \) が \( ( -1 ) \)-truncated であると、とても都合が良いことが分かります。そのような射の一例として、ある関数 \( f : A \to A \to \mathrm{Bool} \) が存在して、射の定義が \( \mathrm{Hom} ( x, y ) = ( f ( x, y ) = \mathrm{true} ) \) となるようなものがあります。これは SSReflect の Homotopy Type Theory から見た有用性の一つになるでしょう。

== 最後に ==

「調べただけの記事」という点で他の記事よりも劣ってしまっている本記事ですが、最後まで読んでいただいてありがとうございます。

== 注釈 ==

<references />
